buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:8.1.0'
  }
}

apply plugin: 'com.android.library'

static def safePackageName(String packageName) {
  packageName.replace("-lts", "")
}

def safePackageVersion(String packageName) {
  def version = project.properties['ffmpegKit.android.main.version']
  def ltsVersion = project.properties['ffmpegKit.android.lts.version']
  packageName.contains("-lts") ? ltsVersion + ".LTS" : version
}

def safeExtGet(String prop, String fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  if (project.android.hasProperty("namespace")) {
    namespace 'com.hooper.ffmpegkit.reactnative'
  }

  packagingOptions {
    pickFirst 'lib/arm64-v8a/libavcodec.so'
    pickFirst 'lib/arm64-v8a/libavdevice.so'
    pickFirst 'lib/arm64-v8a/libavfilter.so'
    pickFirst 'lib/arm64-v8a/libavformat.so'
    pickFirst 'lib/arm64-v8a/libavutil.so'
    pickFirst 'lib/arm64-v8a/libswresample.so'
    pickFirst 'lib/arm64-v8a/libswscale.so'
    pickFirst 'lib/arm64-v8a/libffmpeg.so'

    // If you're supporting 32-bit ARM
    pickFirst 'lib/armeabi-v7a/libavcodec.so'
    pickFirst 'lib/armeabi-v7a/libavdevice.so'
    pickFirst 'lib/armeabi-v7a/libavfilter.so'
    pickFirst 'lib/armeabi-v7a/libavformat.so'
    pickFirst 'lib/armeabi-v7a/libavutil.so'
    pickFirst 'lib/armeabi-v7a/libswresample.so'
    pickFirst 'lib/armeabi-v7a/libswscale.so'
    pickFirst 'lib/armeabi-v7a/libffmpeg.so'

    // If you're supporting x86
    pickFirst 'lib/x86/libavcodec.so'
    pickFirst 'lib/x86/libavdevice.so'
    pickFirst 'lib/x86/libavfilter.so'
    pickFirst 'lib/x86/libavformat.so'
    pickFirst 'lib/x86/libavutil.so'
    pickFirst 'lib/x86/libswresample.so'
    pickFirst 'lib/x86/libswscale.so'
    pickFirst 'lib/x86/libffmpeg.so'

    // If you're supporting x86_64
    pickFirst 'lib/x86_64/libavcodec.so'
    pickFirst 'lib/x86_64/libavdevice.so'
    pickFirst 'lib/x86_64/libavfilter.so'
    pickFirst 'lib/x86_64/libavformat.so'
    pickFirst 'lib/x86_64/libavutil.so'
    pickFirst 'lib/x86_64/libswresample.so'
    pickFirst 'lib/x86_64/libswscale.so'
    pickFirst 'lib/x86_64/libffmpeg.so'
  }

  compileSdkVersion 33

  defaultConfig {
    minSdkVersion safeExtGet('ffmpegKitPackage', 'https').contains("-lts") ? 16 : 24
    targetSdkVersion 33
    versionCode 602
    versionName "6.0.2"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      'node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {
  api 'com.facebook.react:react-native:+'
}
